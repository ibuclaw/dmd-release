# Reusable workflow for Github Action which builds release for specified revisions
#
# This script builds and packages a release for Linux, Windows, OSX and FreeBSD
# using the specified revision. The generated archives are returned as build
# artifacts
#
# Job overview:
# 1. Generates the documentation included in each release
# 2. Builds the actual release (using a matrix over all targets)

name: build-release

on:
  # Only runs when called from another workflow
  workflow_call:
    inputs:
      # Determines the branch for all repositories
      release_branch:
        type: string
        required: true
        description: Revision to build as a new release

      installer_repo:
        type: string
        default: 'dlang/installer'
        description: dlang/installer or any fork hosting installer_branch

      installer_branch:
        type: string
        default: 'master'
        description: Branch providing the build scripts

    # Expose the commit hash of the built revisions for dmd / druntime / phobos
    # (useful for error reporting / logs / ...)
    outputs:
      dmd-revision:
        value: ${{ jobs.build-docs.outputs.dmd-revision }}

      phobos-revision:
        value: ${{ jobs.build-docs.outputs.phobos-revision }}

jobs:
  # Build the documentation used by all releases
  build-docs:
    name: Build documentation for all repos

    outputs:
      dmd-revision: ${{ steps.get-revisions.outputs.dmd-revision }}
      phobos-revision: ${{ steps.get-revisions.outputs.phobos-revision }}

    steps:
      # Clone all required repos
      - name: Clone dmd
        uses: actions/checkout@v2
        with:
          repository: 'ibuclaw/dmd-release'
          ref: ${{ inputs.release_branch }}
          path: 'dmd'

      - name: Clone phobos
        uses: actions/checkout@v2
        with:
          repository: 'dlang/phobos'
          ref: ${{ inputs.release_branch }}
          path: 'phobos'

      - name: Clone dlang.org
        uses: actions/checkout@v2
        with:
          repository: 'dlang/dlang.org'
          ref: ${{ inputs.release_branch }}
          path: 'dlang.org'

      # Fetch host compiler
      - uses: dlang-community/setup-dlang@v1
        name: Install host DMD to build the documentation
        with:
          compiler: dmd-latest

      # Actually build the docs
      - name: Build docs and man pages
        shell: bash
        run: |
          set -euox pipefail
          N=$(( 2 * $(nproc) ))

          # Build minimal host compiler (sometimes not triggered by dlang.org/posix.mak)
          make -f posix.mak -j$N -C dmd/druntime

          # Build docs and include the man pages
          make -f posix.mak -j$N -C dlang.org release
          cp -r dmd/generated/docs/man dlang.org/web/

      # Save the generated documentation for the target-specific builds
      - name: Upload generated docs as a temporary artifact
        uses: actions/upload-artifact@v2
        with:
          name: dmd-documentation
          path: dlang.org/web
          retention-days: 1
          if-no-files-found: error

      - name: Determine revisions
        id: get-revisions
        shell: bash
        run: |
          set -euox pipefail

          for REPO in dmd phobos
          do
            REV=$( git -C $REPO rev-parse HEAD )
            echo "::set-output name=$REPO-revision::$REV"
          done

    runs-on: ubuntu-latest

  # Build and package a new release for each platform
  build-all-releases:
    name: Build release for ${{ matrix.target }}  on ${{ matrix.os }}
    needs: build-docs
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: macos-latest
            target: osx
          - os: windows-2019
            target: windows
          # FreeBSD is built on an additional VM
          - os: macOS-11
            target: freebsd

    steps:

      #################################################################
      # Install the system dependencies required to build and run
      # the actual release scripts
      #
      # Linux implementation based on `linux_both` in build_all.d and
      # some additional experimentation to get curl working
      #
      - name: Install dependencies for linux
        if: matrix.target == 'linux'
        shell: bash
        run: |
          set -euox pipefail

          # Install base dependencies (including multlib support)
          sudo dpkg --add-architecture i386
          sudo apt -y update
          sudo apt -y install --no-install-recommends \
              build-essential \
              ca-certificates \
              curl \
              dpkg-dev \
              fakeroot \
              g++ \
              g++-multilib \
              gcc \
              git \
              gpg \
              gpg-agent \
              libcurl4 \
              libcurl4-openssl-dev \
              libcurl4:i386 \
              libxml2 \
              make \
              p7zip-full \
              rpm \
              rsync \
              unzip \
              xz-utils

          # Save some space
          sudo apt clean

      #################################################################
      # Install latest LDC used to compile the release scripts and to
      # determine the currently available version number
      #
      - uses: dlang-community/setup-dlang@v1
        name: Install latest LDC
        if: matrix.target != 'freebsd'
        with:
          compiler: ldc-latest

      #################################################################
      # Clone dlang/installer which provides the actual build scripts
      #
      - name: Clone installer repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.installer_repo }}
          ref: ${{ inputs.installer_branch }}

      #################################################################
      # Load the generated documentation in the create_dmd_release folder
      #
      - name: Download docs generated by the previous job
        uses: actions/download-artifact@v2
        with:
          name: dmd-documentation
          path: create_dmd_release/docs

      #################################################################
      # Build for the current target using build_all.d from installer
      #
      - name: Fetch common resources and run build_all.d for ${{ matrix.target }}
        id: build
        if: matrix.target != 'freebsd'
        shell: bash
        run: |
          set -euox pipefail

          # Fetch GPG key used to sign the generated binaries
          curl https://dlang.org/d-keyring.gpg -o d-keyring.gpg
          gpg --import d-keyring.gpg

          # Compile release builder
          cd create_dmd_release
          ldmd2 -g -m64 --link-defaultlib-debug -version=NoVagrant -i build_all.d

          # Determine installed LDC version
          LDC=$(head -n 1 < <(ldc2 --version) | cut -d'(' -f2 | cut -d')' -f1)

          # WINDOWS: Fetch additional DM tools
          if [[ "${{ matrix.target }}" == "windows" ]]
          then

            # Fetch DMC (incl. DM make and sppn.exe)
            curl http://downloads.dlang.org/other/dm857c.zip -o dmc.zip
            7z x dmc.zip
            curl http://ftp.digitalmars.com/sppn.zip -o sppn.zip
            7z x -odm/bin sppn.zip

            # Fetch implib
            curl http://ftp.digitalmars.com/bup.zip -o bup.zip
            7z x bup.zip dm/bin/implib.exe

            # Add DM binaries to the path
            export PATH="$PWD/dm/bin;$PATH"

            # Export VS dir
            export LDC_VSDIR='C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
          fi

          # Workaround: Provide ldmd2 as dmd replacement as some tools assume DMD is present:
          mkdir .pathext
          ln -s "$(which ldmd2)" .pathext/dmd
          if [[ "${{ matrix.target }}" == "windows" ]]
          then
            PATH="$PATH;$PWD/.pathext"
          else
            PATH="$PATH:$PWD/.pathext"
          fi

          # Build the release
          ./build_all --targets=${{ matrix.target }} "v$LDC" ${{ inputs.release_branch }}

      #################################################################
      # FREEBSD: Build for the current target using build_all.d from installer
      #
      - name: Run build_all.d for FreeBSD in a dedicated VM
        if: matrix.target == 'freebsd'
        uses: vmactions/freebsd-vm@v0.2.9
        with:
          usesh: true
          # Need more RAM than the default 1G
          mem: 4096
          prepare: pkg install -y bash curl curlpp git gmake pkgconf gnupg rsync llvm90
          run: |
            set -eux

            # Import key used to sign binaries
            curl https://dlang.org/d-keyring.gpg -o d-keyring.gpg
            gpg d-keyring.gpg

            # Install ldc
            curl https://dlang.org/install.sh -o install.sh
            bash install.sh ldc -p .

            # Use absolute paths because activate doesn't work correctly
            LDC_BIN=$PWD/ldc-*/bin

            # Determine installed LDC version
            LDC=$($LDC_BIN/ldc2 --version | head -n 1 | cut -d'(' -f2 | cut -d')' -f1)

            # Determine additional linker flags to make -lcurl work
            EXTRA_FLAGS="-L$(pkg-config --libs-only-L libcurl)"

            # Actually build the release
            cd create_dmd_release
            $LDC_BIN/ldmd2 -g -m64 --link-defaultlib-debug -version=NoVagrant -i build_all.d $EXTRA_FLAGS
            ./build_all --targets=${{ matrix.target }} "v$LDC" ${{ inputs.release_branch }}

      #################################################################
      # Save the target-specific release as a artifact s.t. the next
      # job(s) have access to all generated releases
      #
      - name: Upload generated release as a temporary artifact
        uses: actions/upload-artifact@v2
        with:
          name: dmd-release
          path: |
            ${{ github.workspace }}/create_dmd_release/build/*
            !${{ github.workspace }}/create_dmd_release/build/*.zip
          retention-days: 1
          if-no-files-found: error

    runs-on: ${{ matrix.os }}
